#!/bin/bash

sn=$(cat /proc/cpuinfo | grep Serial | awk '{print $3}')
piid="rpi$sn"
filename="pi2mqtt.conf"

if [ -f $filename ]; then
  echo "init_pi2mqtt - $filename exists, moving to .bak"
  mv $filename $filename.bak
else
  echo "init_pi2mqtt - creating $filename"
fi
  cat << EOF > $filename
# $filename configuration file to provide to the pi2mqtt tool.  
# This file sets devices up so that pi2mqtt will monitor.

home = $piid

# client ID for the mqtt sensor controller (usually the microcontroller id 
# such as the PI  THIS MUST BE A UNIQUE identifier)
clientid = client$RANDOM


#mqtt broker address
mqttbrokeraddress = "localhost"

#mqtt broker uid
mqttbrokeruid = "mqttpi"

#mqtt broker uid password
mqttbrokerpwd = "password"

# topic for the sensor controller's management port.  
# This will be monitored to provide management messages back to the controller.
mqttsubtopic = "$piid/system/manage/+"

# Below is the section for the low temperature NIST temp sensors.  These sensors
# are 2.8K NTC Thermistors. You can have
# multiple sensors, just provide different names and topics.  You must also
# provide the wiringPi pin number.
#tempsensor sensor1 {
# pin = <ADC pin number>
# A = "00e00"
# B = "00e00"
# C = "00e00"
# Rb = 0.0
# location = "<location>"
# mqttpubtopic = "tempsensor"
# sampletime = 1
#}
EOF

  if [ -d /sys/bus/w1/devices ];
  then
    cat << EOF4 >> $filename
# Below are detected one-wire devices.  If you wish to enable them, update
# the parameters and remove the comment lines.
# Parameters are as follows:
#   address - this is the device directory that was detected for this sensor.
#   location - this is a text field that gives a geographical location for this
#              sensor.  Best not to use spaces as this is part of the topic that
#              is published
#   mqttpubtopic - last level topic for this sensor.  Typically 'temp'
#   sampletime - time in seconds to sample this sensor. Will be sampled at this
#              interval or greater.
#   isfahrenheit - flag to determine the value of temperature to publish

EOF4
    y=0
    for x in /sys/bus/w1/devices/28*
    do
      if [ -d $x ];
      then
        echo "ds18b20 sensor$y {" >> template.conf
        echo " address = \"$x\"" >> template.conf
        echo " location = \"<location>\"" >> template.conf
        echo " mqttpubtopic = \"temp\"" >> template.conf
        echo " sampletime = 1" >> template.conf
        echo " isfahrenheit = 1" >> template.conf
        echo "}" >> template.conf
        echo " " >> template.conf
        y=$((y+1))
      fi
    done
  else
    echo "init_pi2mqtt - no one wire devices found"
  fi
  if [ -c /dev/ttyUSB0 ];
  then
    cat << EOF1 >> $filename

# uncomment the next series if you have a RAVEn device attached to the rpi 
# and want to monitor.  Ensure the serial USB is available
#RAVEn raven0 {
# address = "/dev/ttyUSB0"
# mqttpubtopic = "demand"
# location = "location"
#}

EOF1
  else
    echo "init_pi2mqtt - no USB device found, assuming no RAVEn"
  fi
 
  cat << EOF2 >> $filename
# uncomment the next series if you have a DHT22/11 device attached to the rpi
# and want to monitor.  Set the pin location if different.
#dht22 dht22 {
# pin = 4
# mqttpubtopic = "home/dht22"
# isfahrenheit = 1
#}

# uncomment next series if you wish to monitor door switches.  You can have
# multiple switches, just provide different names and topics.  You must also
# provide the wiringPi pin number.
#doorswitch door1 {
# pin = <pin number>
# location = "<location>"
# mqttpubtopic = "switchstate"
# sampletime = "1"
#}

# the log file name that will be created if -v or debug mode is set
debuglogfile = "./temp2mqtt.log"

# uncomment the next line if you wish to have debug mode.
#debugmode = 1

EOF2

fullfilename=/usr/local/share/pi2mqtt/$filename

if [ -f pi2mqtt.sh ]; then
  echo "init_pi2mqtt - pi2mqtt.sh exists, no new one created"
else
  echo "init_pi2mqtt - creating pi2mqtt.sh"
cat << "EOF5" >> pi2mqtt.sh
#!/bin/sh

### BEGIN INIT INFO
# Provides:          pi2mqtt
# Required-Start:    $local_fs $network
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: pi2mqtt service
# Description:       Runs pi2mqtt service
### END INIT INFO

# Carry out specific functions when asked to by the system
EOF5
echo "SCRIPT=\"/usr/local/bin/pi2mqtt -c $fullfilename\"" >> pi2mqtt.sh
cat << "EOF6" >> pi2mqtt.sh
RUNAS=pi

PIDFILE=/var/run/pi2mqtt.pid
LOGDIR=/var/log/pi2mqtt
LOGFILE=/var/log/pi2mqtt/pi2mqtt.log
DUMPDIR=/var/tmp/pi2mqtt


start() {
  if [ -f /var/run/$PIDNAME ] && kill -0 $(cat /var/run/$PIDNAME); then
    echo 'Service already running' >&2
    return 1
  fi
  echo 'Starting service…' >&2
  if [ ! -d $DUMPDIR ]; then
    su -c "mkdir -p $DUMPDIR" $RUNAS
  fi
  if [ ! -d $LOGDIR ]; then
    su -c "mkdir -p $LOGDIR" $RUNAS
  fi

  local CMD="$SCRIPT &> \"$LOGFILE\" & echo \$!"
  su -c "$CMD" $RUNAS > "$PIDFILE"
  echo 'Service started' >&2
}

stop() {
  if [ ! -f "$PIDFILE" ] || ! kill -0 $(cat "$PIDFILE"); then
    echo 'Service not running' >&2
    return 1
  fi
  echo 'Stopping service…' >&2
  kill -15 $(cat "$PIDFILE") && rm -f "$PIDFILE"
  echo 'Service stopped' >&2
}


case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    stop
    start
    ;;
  *)
    echo "Usage: $0 {start|stop|restart}"
esac
EOF6

echo " "
echo "!!!!!!!!!!!!"
echo "init_pi2mqtt - You must update config and copy pi2mqtt.sh into /etc/init.d/ and enable"
echo "               $ sudo cp pi2mqtt.sh /etc/init.d/pi2mqtt"
echo "               $ sudo chmod +x /etc/init.d/pi2mqtt"
echo "               $ sudo update-rc.d pi2mqtt defaults"

fi